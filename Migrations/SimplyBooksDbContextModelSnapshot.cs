// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace SimplyBooksBE1.Migrations
{
    [DbContext(typeof(SimplyBooksDbContext))]
    partial class SimplyBooksDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SimplyBooks.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Favorite")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "charlotte.perkins@example.com",
                            Favorite = true,
                            FirstName = "Charlotte",
                            Image = "charlotte.jpg",
                            LastName = "Perkins Gilman",
                            Uid = "UID001"
                        },
                        new
                        {
                            Id = 2,
                            Email = "langston.hughes@example.com",
                            Favorite = false,
                            FirstName = "Langston",
                            Image = "langston.jpg",
                            LastName = "Hughes",
                            Uid = "UID002"
                        },
                        new
                        {
                            Id = 3,
                            Email = "zora.hurston@example.com",
                            Favorite = true,
                            FirstName = "Zora",
                            Image = "zora.jpg",
                            LastName = "Neale Hurston",
                            Uid = "UID003"
                        },
                        new
                        {
                            Id = 4,
                            Email = "james.baldwin@example.com",
                            Favorite = false,
                            FirstName = "James",
                            Image = "james.jpg",
                            LastName = "Baldwin",
                            Uid = "UID004"
                        },
                        new
                        {
                            Id = 5,
                            Email = "toni.morrison@example.com",
                            Favorite = true,
                            FirstName = "Toni",
                            Image = "toni.jpg",
                            LastName = "Morrison",
                            Uid = "UID005"
                        });
                });

            modelBuilder.Entity("SimplyBooks.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<bool>("Sale")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Description = "A pioneering feminist work by Charlotte Perkins Gilman examining the economic independence of women.",
                            Image = "women_economics.jpg",
                            Price = 13.50m,
                            Sale = false,
                            Title = "Women and Economics",
                            Uid = "BID001"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 4,
                            Description = "A short story collection by Daphne Du Maurier exploring psychological tension and mystery.",
                            Image = "breaking_point.jpg",
                            Price = 9.25m,
                            Sale = true,
                            Title = "The Breaking Point",
                            Uid = "BID002"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            Description = "A reflective novel by Jacqueline Harpman about a woman's inner world and the meaning of solitude.",
                            Image = "mistress_silence.jpg",
                            Price = 10.99m,
                            Sale = false,
                            Title = "The Mistress of Silence",
                            Uid = "BID003"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 2,
                            Description = "A haunting tale by Ling Ling Huang about a concert pianist whose emotional unraveling blurs the lines between art and grief.",
                            Image = "ghost_music.jpg",
                            Price = 13.75m,
                            Sale = true,
                            Title = "Ghost Music",
                            Uid = "BID004"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 5,
                            Description = "A collection of short stories by N.K. Jemisin blending speculative fiction with social commentary.",
                            Image = "black_future_month.jpg",
                            Price = 11.50m,
                            Sale = false,
                            Title = "How Long 'Til Black Future Month?",
                            Uid = "BID005"
                        });
                });

            modelBuilder.Entity("SimplyBooks.Models.Book", b =>
                {
                    b.HasOne("SimplyBooks.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("SimplyBooks.Models.Author", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
